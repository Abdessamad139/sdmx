1. Check the version number in setup.py.

   - Ensure there is a '.dev0', '.dev1', etc. suffix for test releases/uploads,
     i.e. down to step 5 below
   - See https://www.python.org/dev/peps/pep-0440/#pre-releases

2. Test-build the source and binary packages, check them for correctness:

    $ rm -r build dist
    $ python setup.py bdist_wheel sdist
    $ twine check dist/*

   Address any warnings or errors that appear.

3. Upload the packages to the TEST instance of PyPI:

    $ twine upload -r testpypi dist/*

4. Check at https://test.pypi.org/project/pandaSDMX/ that:

   - The package can be downloaded, installed and run.
   - The README is rendered correctly.
   - Links to the documentation go to the correct version.

   If not, modify the code; increment the '.devN' version number suffix, and
   upload again.

5. Change the version number in setup.py.

   - If releasing a major, minor, or patch version, e.g. '1.2.3' remove all
     suffixes like 'b4' from '1.2.3b4'; or 'b5.dev6' from '1.2.3b4.dev5'.
   - If releasing a pre-release version like e.g. '1.2.0b3', remove a
     development release suffix like '.dev4' from '1.2.0b3.dev4'.

6. Commit. This commit should contain only one line change—the version number
   in setup.py—and have the commit message “Release X.Y.Z”.

    $ git commit -m "Release X.Y.Z"

7. Tag the commit, e.g.:

    $ git tag vX.Y.Z

8. Push the commit and tag to Github.

    $ git push --tags

9. Build the source and binary packages. Be sure to first remove any
   development builds:

    $ rm -r build dist
    $ python setup.py bdist_wheel sdist

10. Upload to PyPI:

    $ twine upload dist/*

11. Immediately change the version number in setup.py and make a new commit to
    indicate development status. E.g. if '1.2.3' was released, change the
    version to '1.2.3.post0', '1.3.0.dev0', or similar.
